// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.786
package configView

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "general_spider_controll_panel/view/layout"

func Main(title string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"flex h-screen\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = layout.LeftNavbar("Config").Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"container mx-auto p-4 bg-white rounded-lg shadow-md mt-8\"><h1 class=\"text-2xl font-bold mb-4\">Configuration Dashboard</h1><form hx-post=\"?action=save-config\" hx-include=\"#json-data, #name, #description, #base-url\"><div class=\"mb-4\"><label for=\"base-url\" class=\"block font-semibold mb-1\">Base URL</label> <input id=\"base-url\" name=\"base-url\" type=\"text\" required placeholder=\"Enter base URL : http://example.onion\" class=\"w-full p-2 border border-gray-300 rounded-md\"></div><div class=\"mb-4\"><label for=\"name\" class=\"block font-semibold mb-1\">Name</label> <input id=\"name\" name=\"name\" type=\"text\" required placeholder=\"Enter the config name : config-v1\" class=\"w-full p-2 border border-gray-300 rounded-md\"></div><div class=\"mb-4\"><label for=\"configType\" class=\"block font-semibold mb-1\">Config type</label> <select id=\"configType\" name=\"configType\" required class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500\"><option value=\"\">Choose an config type</option> <option value=\"marketplace\">Marketplace</option> <option value=\"news\">News</option> <option value=\"forum\">Forum</option></select></div><div class=\"mb-4\"><label for=\"description\" class=\"block font-semibold mb-1\">Description (Opsional)</label> <textarea id=\"description\" name=\"description\" rows=\"4\" class=\"block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500\" placeholder=\"What is this config about ?\"></textarea></div><div class=\"flex gap-4 mb-4\"><button id=\"add-config\" class=\"px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600\">Add New Configuration</button> <label class=\"px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 cursor-pointer\">Load from Disk <input id=\"load-config\" type=\"file\" accept=\".json\" class=\"hidden\"></label> <button id=\"download-config\" class=\"px-4 py-2 bg-purple-500 text-white rounded-md hover:bg-purple-600\">Download Configuration</button> <button type=\"submit\" id=\"deploy-config\" class=\"px-4 py-2 bg-purple-500 text-white rounded-md hover:bg-purple-600\">Deploy Configuration</button> <button type=\"submit\" id=\"test-config\" hx-post=\"?action=test-config\" hx-include=\"#json-data, #base-url\" hx-target=\"#config-runner-container\" class=\"px-4 py-2 bg-purple-500 text-white rounded-md hover:bg-purple-600 disabled:bg-purple-300 disabled:cursor-not-allowed disabled:opacity-50\">Test Configuration</button></div><div id=\"config-container\" class=\"space-y-2\"></div><div class=\"mt-4\"><details class=\"group\"><summary class=\"flex w-full cursor-pointer items-center justify-between rounded-lg bg-white px-4 py-2 text-left text-xl font-semibold shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2\"><span>JSON Preview</span> <svg class=\"h-5 w-5 transform transition-transform duration-300 group-open:rotate-180\" viewBox=\"0 0 20 20\" fill=\"currentColor\"><path fill-rule=\"evenodd\" d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" clip-rule=\"evenodd\"></path></svg></summary><div class=\"mt-2 overflow-hidden rounded-md bg-gray-100 transition-all duration-300\"><pre id=\"json-preview\" class=\"p-4 overflow-x-auto max-h-96\"></pre></div></details> <input type=\"hidden\" id=\"json-data\" name=\"jsonData\"></div><div class=\"mt-4\"><details class=\"group\"><summary class=\"flex w-full cursor-pointer items-center justify-between rounded-lg bg-white px-4 py-2 text-left text-xl font-semibold shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2\"><span>Config Run Preview</span> <svg class=\"h-5 w-5 transform transition-transform duration-300 group-open:rotate-180\" viewBox=\"0 0 20 20\" fill=\"currentColor\"><path fill-rule=\"evenodd\" d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" clip-rule=\"evenodd\"></path></svg></summary><div id=\"config-runner-container\" class=\"mt-2 overflow-hidden rounded-md bg-gray-100 transition-all duration-300\"><pre id=\"config-run-preview\" class=\"p-4 overflow-x-auto max-h-96\">Dont have any run yet</pre></div></details></div></form><br><br><br><br><br></div></div><script>\n\t\tdocument.body.addEventListener('htmx:beforeRequest', function(event) {\n\t\tif (event.target && event.target.id == \"test-config\") {\n\t\t\tdocument.getElementById('test-config').disabled = true;\n\t\t\tdocument.getElementById('test-config').textContent = 'Submitting...';\n\t\t}\n\t\t});\n\t\t</script> <script>\n         document.querySelector('button').addEventListener('click', () => {\n            const preContent = document.getElementById('json-preview').innerText;\n            document.getElementById('json-data').value = preContent;\n        });\n        let configs = [{ id: '1', type: 'xpath', value: '', children: [], key: '' }];\n        let baseUrl = '';\n        let draggedElement = null;\n        let originalParent = null;\n        let originalNextSibling = null;\n\n        function renderConfigs() {\n            const container = document.getElementById('config-container');\n            container.innerHTML = '';\n            renderConfigItems(configs, container);\n            updateJsonPreview();\n            saveToLocalStorage();\n        }\n\n        function renderConfigItems(items, container) {\n            items.forEach(config => {\n                const configElement = createConfigElement(config);\n                container.appendChild(configElement);\n            });\n        }\n\n        function createConfigElement(config) {\n            const wrapper = document.createElement('div');\n            wrapper.className = 'config-item bg-gray-50 p-2 rounded-md border border-gray-200';\n            wrapper.dataset.id = config.id;\n            wrapper.dataset.type = config.type;\n            wrapper.dataset.key = config.key || '';\n            wrapper.dataset.value = config.value || '';\n            const content = document.createElement('div');\n            content.className = 'flex items-center space-x-2';\n            content.innerHTML = `\n                <div class=\"cursor-move text-gray-500 hover:text-gray-700\">â‰¡</div>\n                <select class=\"p-1 border border-gray-300 rounded-md\">\n                    ${['xpath', '_list', '_pagination', '_loop', '@section'].map(type => `<option value=\"${type}\" ${config.type === type ? 'selected' : ''}>${type}</option>`).join('')}\n                </select>\n                <input placeholder=\"Enter key\" value=\"${config.key || ''}\" class=\"p-1 border border-gray-300 rounded-md flex-grow ${['_pagination', '_list'].includes(config.type) ? 'hidden' : ''}\">\n                <input placeholder=\"Enter value\" value=\"${config.value || ''}\" class=\"p-1 border border-gray-300 rounded-md flex-grow ${['@section'].includes(config.type) ? 'hidden' : ''}\">\n                <button type=\"button\" class=\"add-child px-2 py-1 bg-blue-500 text-white rounded-md hover:bg-blue-600 ${['xpath', '_pagination'].includes(config.type) ? 'hidden' : ''}\">+</button>\n                <button type=\"button\" class=\"remove-config px-2 py-1 bg-red-500 text-white rounded-md hover:bg-red-600\">-</button>\n            `;\n            wrapper.appendChild(content);\n\n            const typeSelect = content.querySelector('select');\n            const keyInput = content.querySelector('input[placeholder=\"Enter key\"]');\n            const valueInput = content.querySelector('input[placeholder=\"Enter value\"]');\n            const addButton = content.querySelector('button.add-child');\n            const removeButton = content.querySelector('button.remove-config');\n\n            typeSelect.onchange = (e) => updateConfig(wrapper, 'type', e.target.value);\n            keyInput.onchange = (e) => updateConfig(wrapper, 'key', e.target.value);\n            valueInput.onchange = (e) => updateConfig(wrapper, 'value', e.target.value);\n            if (addButton) addButton.onclick = () => addChild(config.id);\n            removeButton.onclick = () => removeConfig(config.id);\n\n            wrapper.draggable = true;\n            wrapper.addEventListener('dragstart', (e) => dragStart(e, config.id));\n            wrapper.addEventListener('dragend', dragEnd);\n            wrapper.addEventListener('dragover', dragOver);\n            wrapper.addEventListener('drop', (e) => drop(e, config.id));\n\n            if (config.children.length > 0 && config.type !== 'xpath') {\n                const childrenContainer = document.createElement('div');\n                childrenContainer.className = 'ml-4 mt-2 space-y-2';\n                renderConfigItems(config.children, childrenContainer);\n                wrapper.appendChild(childrenContainer);\n            }\n\n            return wrapper;\n        }\n\n        function updateConfig(element, field, value) {\n            element.dataset[field] = value;\n            if (field === 'type') {\n                const keyInput = element.querySelector('input[placeholder=\"Enter key\"]');\n                const valueInput = element.querySelector('input[placeholder=\"Enter value\"]');\n                const addButton = element.querySelector('button.add-child');\n\n                if (['_pagination', '_list'].includes(value)) {\n                    keyInput.classList.add('hidden');\n                    valueInput.classList.remove('hidden');\n                } else if (['@section'].includes(value)) {\n                    keyInput.classList.remove('hidden');\n                    valueInput.classList.add('hidden');\n                } else {\n                    keyInput.classList.remove('hidden');\n                    valueInput.classList.remove('hidden');\n                }\n\n                if (addButton) {\n                    addButton.classList.toggle('hidden', ['xpath', '_pagination'].includes(value));\n                }\n            }\n            rebuildConfigsFromDOM();\n            updateJsonPreview();\n            saveToLocalStorage();\n        }\n\n        function updateAddButtonVisibility(element) {\n            const type = element.dataset.type;\n            const addButton = element.querySelector('.add-child');\n            if (addButton) {\n                addButton.classList.toggle('hidden', ['xpath', '_pagination'].includes(type));\n            } else {\n\n            }\n        }\n\n        function rebuildConfigsFromDOM() {\n            const container = document.getElementById('config-container');\n            configs = buildConfigsFromElements(container.children);\n        }\n\n        function buildConfigsFromElements(elements) {\n            const result = [];\n            for (const element of elements) {\n                if (element.classList.contains('config-item')) {\n                    const config = {\n                        id: element.dataset.id,\n                        type: element.dataset.type,\n                        key: element.dataset.key,\n                        value: element.dataset.value,\n                        children: []\n                    };\n\n                    const childrenContainer = element.querySelector('div.ml-4');\n                    if (childrenContainer) {\n                        config.children = buildConfigsFromElements(childrenContainer.children);\n                    }\n                    result.push(config);\n                }\n            }\n            return result;\n        }\n\n        function addChild(parentId) {\n            const parentElement = document.querySelector(`.config-item[data-id=\"${parentId}\"]`);\n            if (parentElement) {\n                const newConfig = { id: Date.now().toString(), type: 'xpath', value: '', children: [], key: '' };\n                const newElement = createConfigElement(newConfig);\n                let childrenContainer = parentElement.querySelector('div.ml-4');\n                if (!childrenContainer) {\n                    childrenContainer = document.createElement('div');\n                    childrenContainer.className = 'ml-4 mt-2 space-y-2';\n                    parentElement.appendChild(childrenContainer);\n                }\n                childrenContainer.appendChild(newElement);\n                rebuildConfigsFromDOM();\n                updateJsonPreview();\n                saveToLocalStorage();\n            }\n        }\n\n        function removeConfig(id) {\n            const element = document.querySelector(`.config-item[data-id=\"${id}\"]`);\n            if (element) {\n                element.remove();\n                rebuildConfigsFromDOM();\n                updateJsonPreview();\n                saveToLocalStorage();\n            }\n        }\n\n        function dragStart(e, id) {\n            draggedElement = e.target.closest('.config-item');\n            originalParent = draggedElement.parentNode;\n            originalNextSibling = draggedElement.nextElementSibling;\n            e.dataTransfer.setData('text/plain', id);\n            setTimeout(() => {\n                draggedElement.classList.add('opacity-50', 'scale-105', 'shadow-lg');\n            }, 0);\n        }\n\n        function dragEnd(e) {\n            if (draggedElement) {\n                draggedElement.classList.remove('opacity-50', 'scale-105', 'shadow-lg');\n                if (!document.body.contains(draggedElement)) {\n                    if (originalNextSibling) {\n                        originalParent.insertBefore(draggedElement, originalNextSibling);\n                    } else {\n                        originalParent.appendChild(draggedElement);\n                    }\n                }\n                rebuildConfigsFromDOM();\n                updateJsonPreview();\n                saveToLocalStorage();\n            }\n            draggedElement = null;\n            originalParent = null;\n            originalNextSibling = null;\n        }\n\n        function dragOver(e) {\n            e.preventDefault();\n            const closestConfigItem = e.target.closest('.config-item');\n            if (closestConfigItem && closestConfigItem !== draggedElement) {\n                const rect = closestConfigItem.getBoundingClientRect();\n                const midpoint = (rect.top + rect.bottom) / 2;\n                if (e.clientY < midpoint) {\n                    closestConfigItem.parentNode.insertBefore(draggedElement, closestConfigItem);\n                } else {\n                    closestConfigItem.parentNode.insertBefore(draggedElement, closestConfigItem.nextSibling);\n                }\n            }\n        }\n\n        function drop(e, droppedOnId) {\n            e.preventDefault();\n            const draggedId = e.dataTransfer.getData('text');\n            if (draggedId !== droppedOnId) {\n                const droppedOnElement = document.querySelector(`.config-item[data-id=\"${droppedOnId}\"]`);\n                if (droppedOnElement && !droppedOnElement.contains(draggedElement)) {\n                    droppedOnElement.parentNode.insertBefore(draggedElement, droppedOnElement.nextSibling);\n                }\n            }\n            draggedElement.classList.remove('opacity-50', 'scale-105', 'shadow-lg');\n            draggedElement = null;\n            rebuildConfigsFromDOM();\n            updateJsonPreview();\n            saveToLocalStorage();\n        }\n\n        function cleanupConfigs(configs) {\n            const structure = {};\n            configs.forEach(config => {\n                if (config.type === 'xpath') {\n                    structure[config.key] = config.value\n                } else if (config.type === '_list') {\n                    structure[config.type] = {\n                        _element: config.value,\n                        ...cleanupConfigs(config.children)\n                    };\n                } else if (config.type === '_loop') {\n                    structure[config.type] = {\n                        _element: config.value,\n                        _key: config.key,\n                        ...cleanupConfigs(config.children)\n                    };\n                } else if (config.type === '_pagination') {\n                    structure[config.type] = config.value\n                    cleanupConfigs(config.children);\n                } else if (config.type === '@section') {\n                    structure[config.key] = cleanupConfigs(config.children);\n                }\n            });\n            return structure;\n        }\n\n        function updateJsonPreview() {\n            const cleanConfigs = cleanupConfigs(configs);\n            const fullConfig = {\n                base_url: baseUrl,\n                cookies: {},\n                structure: cleanConfigs\n            };\n            document.getElementById('json-preview').textContent = JSON.stringify(fullConfig, null, 2);\n            document.getElementById('json-data').value = JSON.stringify(fullConfig, null, 2);\n        }\n\n        function saveToLocalStorage() {\n            localStorage.setItem('configDashboardState', JSON.stringify({\n                configs: configs,\n                baseUrl: baseUrl\n            }));\n        }\n\n        function loadFromLocalStorage() {\n            const savedState = localStorage.getItem('configDashboardState');\n            if (savedState) {\n                const parsedState = JSON.parse(savedState);\n                configs = parsedState.configs;\n                baseUrl = parsedState.baseUrl;\n                document.getElementById('base-url').value = baseUrl;\n                renderConfigs();\n            }\n        }\n\n        function addNewConfig() {\n            const newConfig = { id: Date.now().toString(), type: 'xpath', value: '', children: [], key: '' };\n            const newElement = createConfigElement(newConfig);\n            document.getElementById('config-container').appendChild(newElement);\n            rebuildConfigsFromDOM();\n            updateJsonPreview();\n            saveToLocalStorage();\n        }\n\n        function downloadConfig() {\n            const cleanConfigs = cleanupConfigs(configs);\n            const fullConfig = {\n                base_url: baseUrl,\n                cookies: {},\n                structure: cleanConfigs\n            };\n            const blob = new Blob([JSON.stringify(fullConfig, null, 2)], { type: 'application/json' });\n            const url = URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = 'config.json';\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            URL.revokeObjectURL(url);\n        }\n\n        function deployConfig() {\n            const cleanConfigs = cleanupConfigs(configs);\n            const fullConfig = {\n                base_url: baseUrl,\n                cookies: {},\n                structure: cleanConfigs\n            };\n\n            fetch('/config', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(fullConfig)\n            })\n                .then(response => response.json())\n                .then(data => console.log('Success:', data))\n                .catch((error) => console.error('Error:', error));\n        }\n\n        function loadConfig(e) {\n            const file = e.target.files[0];\n            if (file) {\n                const reader = new FileReader();\n                reader.onload = (event) => {\n                    try {\n                        const loadedConfig = JSON.parse(event.target.result);\n                        baseUrl = loadedConfig.base_url || '';\n                        document.getElementById('base-url').value = baseUrl;\n                        configs = convertStructureToConfigs(loadedConfig.structure);\n                        renderConfigs();\n                    } catch (error) {\n                        console.error('Error parsing JSON:', error);\n                        alert('Error loading configuration. Please make sure it\\'s a valid JSON file.');\n                    }\n                };\n                reader.readAsText(file);\n            }\n        }\n\n        function convertStructureToConfigs(structure) {\n            const result = [];\n            for (const [key, value] of Object.entries(structure)) {\n                if (typeof value === 'string') {\n                    if (key === '_pagination') {\n                        result.push({\n                            id: Date.now().toString() + Math.random().toString(36).substr(2, 9),\n                            type: '_pagination',\n                            key: value,\n                            value: value,\n                            children: []\n                        });\n                    } else {\n                        result.push({\n                            id: Date.now().toString() + Math.random().toString(36).substr(2, 9),\n                            type: 'xpath',\n                            key: key,\n                            value: value,\n                            children: []\n                        });\n                    }\n\n                } else if (typeof value === 'object') {\n                    const newConfig = {\n                        id: Date.now().toString() + Math.random().toString(36).substr(2, 9),\n                        type: key.startsWith('@') ? '@section' : key,\n                        key: key.startsWith('@') ? key : '',\n                        value: value._element || '',\n                        children: []\n                    };\n                    if (key === '_loop') {\n                        newConfig.key = value._key;\n                    } else if (key === '_list') {\n                        newConfig.key = value._element;\n                    }\n                    const childConfigs = convertStructureToConfigs(\n                        Object.fromEntries(\n                            Object.entries(value).filter(([k]) => !['_element', '_key'].includes(k))\n                        )\n                    );\n                    newConfig.children = childConfigs;\n                    result.push(newConfig);\n                }\n            }\n            return result;\n        }\n\n        document.getElementById('add-config').addEventListener('click', addNewConfig);\n        document.getElementById('download-config').addEventListener('click', downloadConfig);\n        document.getElementById('deploy-config').addEventListener('click', deployConfig);\n        document.getElementById('load-config').addEventListener('change', loadConfig);\n        document.getElementById('base-url').addEventListener('change', (e) => {\n            baseUrl = e.target.value;\n            updateJsonPreview();\n            saveToLocalStorage();\n        });\n        document.getElementById('config-container').addEventListener('dragover', (e) => {\n            e.preventDefault();\n        });\n\n        loadFromLocalStorage();\n\n        if (configs.length === 0) {\n            renderConfigs();\n        }\n    </script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return templ_7745c5c3_Err
		})
		templ_7745c5c3_Err = layout.Base(title).Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
