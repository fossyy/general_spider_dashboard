package configView

import (
	"general_spider_controll_panel/types/models"
	"general_spider_controll_panel/utils"
	"general_spider_controll_panel/view/layout"
)

templ Main(title string, urls []string) {
	@layout.Base(title) {
		<div class="flex h-screen">
			@layout.LeftNavbar("Config")
			<div class="container mx-auto p-4 bg-white rounded-lg shadow-md mt-8">
				<h1 class="text-2xl font-bold mb-4">Configuration Dashboard</h1>
				<div id="modal" class="bg-gray-600 bg-opacity-75 overflow-y-auto h-full w-full fixed inset-0 flex items-center justify-center opacity-0 transition-opacity duration-300 z-50 hidden">
					<div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4">
						<div class="border-b px-4 py-2">
							<h3 class="text-lg font-semibold text-gray-900">Scrapy Crawl Preview</h3>
						</div>
						<div class="p-4">
							<div class="mt-2">
								<div class="mb-4">
									<label for="preview-url" class="block text-sm font-medium text-gray-700">URL to Test</label>
									<input type="text" name="base-url" id="preview-url" class="w-full p-2 border border-gray-300 rounded-md" placeholder="Enter URL to test"/>
								</div>
								<div class="mb-4">
									<label for="section-select" class="block text-sm font-medium text-gray-700">Select @section</label>
									<select id="section-select" name="section-select" class="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"></select>
								</div>
								<button
									id="run-preview"
									class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:w-auto sm:text-sm"
									hx-post="?action=test-config"
									hx-include="#preview-config, #preview-url"
									hx-target="#config-runner-container"
								>
									Run Preview
								</button>
							</div>
							<input type="hidden" id="preview-config" name="jsonData"/>
							<div class="mt-2">
								<p class="text-sm text-gray-500 mb-4">This is a preview of a single item from your Scrapy crawl.</p>
								<pre id="config-runner-container" class="bg-gray-100 p-4 rounded-md overflow-auto max-h-[400px] text-sm">
									<div class="animate-pulse space-y-2">
										<div class="h-4 bg-gray-200 rounded w-3/4"></div>
										<div class="h-4 bg-gray-200 rounded"></div>
										<div class="h-4 bg-gray-200 rounded"></div>
										<div class="h-4 bg-gray-200 rounded w-5/6"></div>
										<div class="h-4 bg-gray-200 rounded w-1/2"></div>
									</div>
								</pre>
							</div>
						</div>
						<div class="border-t px-4 py-2 flex justify-end">
							<button onclick={ hidePreviewModal() } class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
								Close
							</button>
						</div>
					</div>
				</div>
				<div id="databaseModal" class="fixed z-10 inset-0 overflow-y-auto hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
					<div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
						<div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
						<span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
						<div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
							<div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
								<h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">
									Saved Configurations
								</h3>
								<div class="mt-2">
									<ul id="config-list" class="divide-y divide-gray-200"></ul>
								</div>
							</div>
							<div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
								<button type="button" onClick={ hideDatabaseModal() } class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
									Close
								</button>
							</div>
						</div>
					</div>
				</div>
				<form hx-post="?action=save-config" hx-include="#json-data, #name, #description, #base-url" hx-on::after-request="localStorage.clear()">
					<input name="base-url" id="base-url" class="hidden" value=""/>
					<div class="mb-4">
						<div class="relative" id="dropdown-container">
							<button id="dropdown-toggle" type="button" class="w-full px-4 py-2 text-left bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
								<span id="selected-option">Select a website...</span>
								<svg class="w-5 h-5 ml-2 -mr-1 absolute right-2 top-3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
									<path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
								</svg>
							</button>
							<div id="dropdown-menu" class="absolute z-10 w-full mt-1 bg-white shadow-lg rounded-md hidden">
								<div class="p-2">
									<input type="text" id="custom-url-input" placeholder="Enter custom URL..." value="" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"/>
								</div>
								<ul id="url-list" class="max-h-60 overflow-auto">
									for _, url := range urls {
										<li class="px-4 py-2 hover:bg-gray-100 cursor-pointer flex items-center">
											<input value={ url } class="hidden base-url-input"/>
											<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
											</svg>
											<div>
												<div>{ url }</div>
												<div class="text-sm text-gray-500">{ url }</div>
											</div>
										</li>
									}
								</ul>
							</div>
						</div>
					</div>
					<div class="mb-4">
						<label for="name" class="block font-semibold mb-1">Name</label>
						<input
							id="name"
							name="name"
							type="text"
							required
							placeholder="Enter the config name : config-v1"
							class="w-full p-2 border border-gray-300 rounded-md"
						/>
					</div>
					<div class="mb-4">
						<label for="configType" class="block font-semibold mb-1">Config type</label>
						<select
							id="configType"
							name="configType"
							required
							class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
						>
							<option value="">Choose an config type</option>
							<option value="marketplace">Marketplace</option>
							<option value="news">News</option>
							<option value="forum">Forum</option>
						</select>
					</div>
					<div class="mb-4">
						<label for="description" class="block font-semibold mb-1">Description (Opsional)</label>
						<textarea id="description" name="description" rows="4" class="block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500" placeholder="What is this config about ?"></textarea>
					</div>
					<input id="load-config" type="file" accept=".json" style="display: none" />
					<div class="flex gap-4 mb-4">
						<button type="button" id="add-config" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">
							Add Field
						</button>
						<button
							type="button"
							id="load-disk-btn"
							class="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 cursor-pointer"
						>
							Load from Disk
						</button>
						<button
							type="button"
							hx-get="?action=get-configs"
							hx-target="#config-list"
							onClick={ showDatabaseModal() }
							class="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 cursor-pointer"
						>
							Load from Database
						</button>
						<button
							type="button"
							id="download-config"
							class="px-4 py-2 bg-purple-500 text-white rounded-md hover:bg-purple-600"
						>
							Download
							Configuration
						</button>
						<button type="submit" id="deploy-config" class="px-4 py-2 bg-purple-500 text-white rounded-md hover:bg-purple-600">
							Deploy
							Configuration
						</button>
						<button
							type="button"
							id="test-config"
							onClick={ showPreviewModal() }
							class="px-4 py-2 bg-purple-500 text-white rounded-md hover:bg-purple-600 disabled:bg-purple-300 disabled:cursor-not-allowed disabled:opacity-50"
						>
							Test Configuration
						</button>
					</div>
					<span id="version-display" class="ml-4 text-sm text-gray-500 mb-2">Version : 1.1</span>
					<div id="config-container" class="space-y-2"></div>
					<div class="mt-4">
						<div class="mt-8">
							<h2 class="text-xl font-bold mb-2">JSON Preview</h2>
							<pre id="json-preview" class="bg-gray-800 text-white p-4 rounded-md overflow-x-auto"></pre>
						</div>
						<input type="hidden" id="json-data" name="jsonData"/>
					</div>
				</form>
				<br/>
				<br/>
				<br/>
				<br/>
				<br/>
			</div>
		</div>
		<script src="/public/config.js"></script>
		<script>
            // document.body.addEventListener('htmx:beforeRequest', function(event) {
            //     if (event.target && event.target.id == "test-config") {
            //         document.getElementById('test-config').disabled = true;
            //         document.getElementById('test-config').textContent = 'Submitting...';
            //         const modal = document.getElementById('modal');
            //         modal.classList.remove('hidden');
            //         setTimeout(() => {
            //             modal.classList.remove('opacity-0');
            //             modalContent.classList.remove('-translate-y-full', 'scale-95', 'opacity-0');
            //         }, 50);
            //     }
            // });
            document.querySelector('button').addEventListener('click', () => {
                const preContent = document.getElementById('json-preview').innerText;
                document.getElementById('json-data').value = preContent;
            });
			document.getElementById('load-disk-btn').addEventListener('click', function() {
				const fileInput = document.getElementById('load-config');
				fileInput.click();
			});
    </script>
	}
}

templ ConfigsTable(configs []*models.Config) {
	for _, config := range configs {
		<li class="py-4 flex items-center justify-between">
			<div class="flex flex-col">
				<div class="flex items-center">
					<span class="font-medium">{ config.Name }</span>
					<span class="ml-2 text-sm text-gray-500">v{ utils.IntToString(config.ConfigVersion) }</span>
				</div>
				<span class="text-xs text-gray-400">ID: { config.ID.String() }</span>
			</div>
			<button type="button" onClick={ loadConfigFromFetch(config.ID.String()) } class="load-config-btn bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-2 rounded text-sm">
				Load
			</button>
		</li>
	}
}

script showPreviewModal() {
	const modal = document.getElementById('modal');
	const sectionSelect = document.getElementById('section-select');

    modal.classList.remove('hidden');

	sectionSelect.innerHTML = '';
    const sections = getSections();
	const option = document.createElement('option');
    option.value = "main";
    option.textContent = "main";
    sectionSelect.appendChild(option);
    sections.forEach(section => {
        const option = document.createElement('option');
        option.value = section.key;
        option.textContent = section.key;
        sectionSelect.appendChild(option);
    });

    setTimeout(() => {
        modal.classList.remove('opacity-0');
    }, 50);
}

script hidePreviewModal() {
    const modal = document.getElementById('modal');

    modal.classList.add('opacity-0');
    setTimeout(() => {
        modal.classList.add('hidden');
    }, 300);
}

script showDatabaseModal() {
	const modal = document.getElementById('databaseModal');

    modal.classList.remove('hidden');
    setTimeout(() => {
        modal.classList.remove('opacity-0');
    }, 50);
}

script hideDatabaseModal() {
    const modal = document.getElementById('databaseModal');

    modal.classList.add('opacity-0');
    setTimeout(() => {
        modal.classList.add('hidden');
    }, 300);
}

script loadConfigFromFetch(configID string) {
	var name;
	fetch('/config/'+configID)
	.then(response => {
	    if (!response.ok) {
	        throw new Error(`HTTP error! status: ${response.status}`);
	    }
	    return response.json();
	})
	.then(config => {
	    configName = config.name;
		document.getElementById("name").value = config.name
	    baseUrl = config.data.base_url;
	    configs = convertStructureToConfigs(config.data.structure);
	    renderConfigs();
	    hasChanged = false;
	    showToast("Config Loaded succesfully", 10000, "success");
	})
	.catch(error => {
	    console.error("Could not fetch the configuration:", error);
	    showToast("Failed to load the configuration. Please try again.", 10000, "error");
	});

	fetch('/config/version/'+configID)
	.then(response => {
	    if (!response.ok) {
	        throw new Error(`HTTP error! status: ${response.status}`);
	    }
	    return response.json();
	})
	.then(config => {
	    document.getElementById("version-display").innerHTML = "Version : "+config.full_version
	    version = config.full_version
	})
	.catch(error => {
	    console.error("Could not fetch the configuration:", error);
	    showToast("Failed to load the configuration. Please try again.", 10000, "error");
	});

	const modal = document.getElementById('databaseModal');

    modal.classList.add('opacity-0');
    setTimeout(() => {
        modal.classList.add('hidden');
    }, 300);
}
