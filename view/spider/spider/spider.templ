package spiderView

import (
	"fmt"
	"general_spider_controll_panel/types"
	"general_spider_controll_panel/view/layout"
)

templ Main(title string) {
	@layout.Base(title) {
		<div class="flex h-screen">
			@layout.LeftNavbar("Spiders")
			<div class="flex-1 overflow-auto">
				<div class="p-8">
					<div class="flex justify-between items-center mb-6">
						<h1 class="text-3xl font-bold">Spiders</h1>
						<div class="flex space-x-4">
							<a href="/deploy" class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded transition-colors duration-300 flex items-center">
								<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
									<path d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
								</svg>
								Deploy Spider
							</a>
							<button hx-get="?action=get-spiders" hx-target="#spiderList" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded transition-colors duration-300 flex items-center">
								<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
									<path d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
								</svg>
								Refresh
							</button>
						</div>
					</div>
					<div class="bg-white shadow-md rounded-lg">
						<div class="px-4 py-3 border-b border-gray-200">
							<h2 class="text-lg font-semibold text-gray-800">Active Spiders</h2>
						</div>
						<ul class="divide-y divide-gray-200 overflow-auto" id="spiderList" hx-get="?action=get-spiders" hx-trigger="load" hx-swap="innerHTML">
							<li class="px-4 py-3 sm:px-6">
								<div class="flex items-center justify-between">
									<div class="flex items-center">
										<div class="flex-shrink-0">
											<div class="h-4 w-4 rounded-full bg-gray-200 animate-pulse"></div>
										</div>
										<div class="ml-3">
											<div class="w-32 h-5 bg-gray-200 rounded animate-pulse"></div>
											<div class="mt-1 w-48 h-4 bg-gray-200 rounded animate-pulse"></div>
										</div>
									</div>
									<div class="flex space-x-2">
										<div class="w-16 h-8 bg-gray-200 rounded animate-pulse"></div>
										<div class="w-16 h-8 bg-gray-200 rounded animate-pulse"></div>
									</div>
								</div>
							</li>
							<li class="px-4 py-3 sm:px-6">
								<div class="flex items-center justify-between">
									<div class="flex items-center">
										<div class="flex-shrink-0">
											<div class="h-4 w-4 rounded-full bg-gray-200 animate-pulse"></div>
										</div>
										<div class="ml-3">
											<div class="w-32 h-5 bg-gray-200 rounded animate-pulse"></div>
											<div class="mt-1 w-48 h-4 bg-gray-200 rounded animate-pulse"></div>
										</div>
									</div>
									<div class="flex space-x-2">
										<div class="w-16 h-8 bg-gray-200 rounded animate-pulse"></div>
										<div class="w-16 h-8 bg-gray-200 rounded animate-pulse"></div>
									</div>
								</div>
							</li>
							<li class="px-4 py-3 sm:px-6">
								<div class="flex items-center justify-between">
									<div class="flex items-center">
										<div class="flex-shrink-0">
											<div class="h-4 w-4 rounded-full bg-gray-200 animate-pulse"></div>
										</div>
										<div class="ml-3">
											<div class="w-32 h-5 bg-gray-200 rounded animate-pulse"></div>
											<div class="mt-1 w-48 h-4 bg-gray-200 rounded animate-pulse"></div>
										</div>
									</div>
									<div class="flex space-x-2">
										<div class="w-16 h-8 bg-gray-200 rounded animate-pulse"></div>
										<div class="w-16 h-8 bg-gray-200 rounded animate-pulse"></div>
									</div>
								</div>
							</li>
						</ul>
					</div>
				</div>
			</div>
		</div>
	}
}

templ GetSpider(spiders *types.ScrapydResponseGetingSpiders) {
	if len(spiders.Running) == 0 {
		<div class="px-6 py-12 text-center">
			<svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
			</svg>
			<h3 class="mt-2 text-sm font-medium text-gray-900">No spiders running</h3>
			<p class="mt-1 text-sm text-gray-500">Get started by deploying a new spider.</p>
			<div class="mt-6">
				<a href="/deploy" type="button" class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
					<svg class="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
					</svg>
					Deploy New Spider
				</a>
			</div>
		</div>
	}
	for _, runningSpider := range(spiders.Running) {
		<li class="px-4 py-3 sm:px-6">
			<div class="flex items-center justify-between">
				<div class="flex items-center">
					<div class="flex-shrink-0">
						<span class="h-4 w-4 rounded-full bg-green-400 flex items-center justify-center">
							<span class="h-2 w-2 rounded-full bg-green-600"></span>
						</span>
					</div>
					<div class="ml-3">
						<p class="text-sm font-medium text-gray-900">{ runningSpider.Id }</p>
						<p class="text-sm text-gray-500">{ runningSpider.StartTime }</p>
					</div>
				</div>
				<div class="flex">
					<a href={ templ.SafeURL(fmt.Sprintf("%s/%v", runningSpider.Project, runningSpider.Id)) } class="text-sm bg-blue-100 hover:bg-blue-200 text-blue-800 font-semibold py-1 px-3 rounded-full transition duration-300 ease-in-out">
						Details
					</a>
				</div>
			</div>
		</li>
	}
	for _, pendingSpider := range(spiders.Pending){
		<li class="px-4 py-3 sm:px-6">
			<div class="flex items-center justify-between">
				<div class="flex items-center">
					<div class="flex-shrink-0">
						<span class="h-4 w-4 rounded-full bg-yellow-400 flex items-center justify-center">
							<span class="h-2 w-2 rounded-full bg-yellow-600"></span>
						</span>
					</div>
					<div class="ml-3">
						<p class="text-sm font-medium text-gray-900">{ pendingSpider.Id }</p>
						<p class="text-sm text-gray-500">Pending deployment</p>
					</div>
				</div>
				<div class="flex">
					<a href={ templ.SafeURL(fmt.Sprintf("%s/%v", pendingSpider.Project, pendingSpider.Id)) } class="text-sm bg-blue-100 hover:bg-blue-200 text-blue-800 font-semibold py-1 px-3 rounded-full transition duration-300 ease-in-out">
						Details
					</a>
				</div>
			</div>
		</li>
	}
	for _, finishedSpider := range(spiders.Finished) {
		<li class="px-4 py-3 sm:px-6">
			<div class="flex items-center justify-between">
				<div class="flex items-center">
					<div class="flex-shrink-0">
						<span class="h-4 w-4 rounded-full bg-gray-400 flex items-center justify-center">
							<span class="h-2 w-2 rounded-full bg-gray-600"></span>
						</span>
					</div>
					<div class="ml-3">
						<p class="text-sm font-medium text-gray-900">{ finishedSpider.Id }</p>
						<p class="text-sm text-gray-500">Finished - Completed { finishedSpider.EndTime }</p>
					</div>
				</div>
				<div class="flex">
					<a href={ templ.SafeURL(fmt.Sprintf("%s/%v", finishedSpider.Project, finishedSpider.Id)) } class="text-sm bg-blue-100 hover:bg-blue-200 text-blue-800 font-semibold py-1 px-3 rounded-full transition duration-300 ease-in-out">
						Details
					</a>
				</div>
			</div>
		</li>
	}
}
