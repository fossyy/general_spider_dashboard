package spiderView

import (
	"fmt"
	"general_spider_controll_panel/types"
	"general_spider_controll_panel/view/layout"
)

templ Main(title, tableType string) {
	@layout.Base(title) {
		<div class="flex h-screen">
			@layout.LeftNavbar("Spiders")
			<div class="flex-1 overflow-auto">
				<div class="p-8">
					<div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 space-y-4 sm:space-y-0">
						<h1 class="text-2xl sm:text-3xl font-bold">Spiders</h1>
						<div class="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-4 w-full sm:w-auto">
							<a href="/deploy" class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded transition-colors duration-300 flex items-center justify-center sm:justify-start">
								<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
									<path d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
								</svg>
								Deploy Spider
							</a>
							<button hx-get="?action=get-spiders" hx-target="#spiderList" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded transition-colors duration-300 flex items-center justify-center sm:justify-start">
								<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
									<path d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
								</svg>
								Refresh
							</button>
						</div>
					</div>
					<div class="mx-auto space-y-4" id="spiders-container">
						switch tableType {
							case "schedule":
								@ChangeToScheduleTable()
							default:
								@ChangeToRunningTable()
						}
					</div>
				</div>
			</div>
		</div>
	}
}

templ ChangeToRunningTable() {
	<div class="grid grid-cols-2 gap-2 mb-6" role="group">
		<button class="w-full py-2 px-4 bg-blue-500 text-white font-semibold rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50">
			Running Spiders
		</button>
		<button hx-get="?action=change-to-scheduled" hx-target="#spiders-container" hx-push-url="?type=schedule" class="w-full py-2 px-4 bg-gray-200 text-gray-700 font-semibold rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-opacity-50">
			Scheduled Spiders
		</button>
	</div>
	<div class="bg-white shadow-md rounded-lg">
		<div class="px-4 py-3 border-b border-gray-200">
			<h2 class="text-lg font-semibold text-gray-800">Active Spiders</h2>
		</div>
		<ul class="divide-y divide-gray-200 overflow-auto" id="spiderList" hx-get="?action=get-spiders" hx-trigger="load" hx-swap="innerHTML">
			<li class="px-4 py-3 sm:px-6">
				<div class="flex items-center justify-between">
					<div class="flex items-center">
						<div class="flex-shrink-0">
							<div class="h-4 w-4 rounded-full bg-gray-200 animate-pulse"></div>
						</div>
						<div class="ml-3">
							<div class="w-32 h-5 bg-gray-200 rounded animate-pulse"></div>
							<div class="mt-1 w-48 h-4 bg-gray-200 rounded animate-pulse"></div>
						</div>
					</div>
					<div class="flex space-x-2">
						<div class="w-16 h-8 bg-gray-200 rounded animate-pulse"></div>
						<div class="w-16 h-8 bg-gray-200 rounded animate-pulse"></div>
					</div>
				</div>
			</li>
			<li class="px-4 py-3 sm:px-6">
				<div class="flex items-center justify-between">
					<div class="flex items-center">
						<div class="flex-shrink-0">
							<div class="h-4 w-4 rounded-full bg-gray-200 animate-pulse"></div>
						</div>
						<div class="ml-3">
							<div class="w-32 h-5 bg-gray-200 rounded animate-pulse"></div>
							<div class="mt-1 w-48 h-4 bg-gray-200 rounded animate-pulse"></div>
						</div>
					</div>
					<div class="flex space-x-2">
						<div class="w-16 h-8 bg-gray-200 rounded animate-pulse"></div>
						<div class="w-16 h-8 bg-gray-200 rounded animate-pulse"></div>
					</div>
				</div>
			</li>
			<li class="px-4 py-3 sm:px-6">
				<div class="flex items-center justify-between">
					<div class="flex items-center">
						<div class="flex-shrink-0">
							<div class="h-4 w-4 rounded-full bg-gray-200 animate-pulse"></div>
						</div>
						<div class="ml-3">
							<div class="w-32 h-5 bg-gray-200 rounded animate-pulse"></div>
							<div class="mt-1 w-48 h-4 bg-gray-200 rounded animate-pulse"></div>
						</div>
					</div>
					<div class="flex space-x-2">
						<div class="w-16 h-8 bg-gray-200 rounded animate-pulse"></div>
						<div class="w-16 h-8 bg-gray-200 rounded animate-pulse"></div>
					</div>
				</div>
			</li>
		</ul>
	</div>
}

templ ChangeToScheduleTable() {
	<div class="grid grid-cols-2 gap-2 mb-6" role="group">
		<button hx-get="?action=change-to-running" hx-target="#spiders-container" hx-push-url="?type=running" class="w-full py-2 px-4 bg-gray-200 text-gray-700 font-semibold rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-opacity-50">
			Running Spiders
		</button>
		<button class="w-full py-2 px-4 bg-blue-500 text-white font-semibold rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50">
			Scheduled Spiders
		</button>
	</div>
	<div class="bg-white shadow-md rounded-lg">
		<div class="px-4 py-3 border-b border-gray-200">
			<h2 class="text-lg font-semibold text-gray-800">Active Spiders</h2>
		</div>
		<ul class="divide-y divide-gray-200 overflow-auto" id="spiderList" hx-get="?action=get-scheduled" hx-trigger="load" hx-swap="innerHTML">
			<li class="px-4 py-3 sm:px-6">
				<div class="flex items-center justify-between">
					<div class="flex items-center">
						<div class="flex-shrink-0">
							<div class="h-4 w-4 rounded-full bg-gray-200 animate-pulse"></div>
						</div>
						<div class="ml-3">
							<div class="w-32 h-5 bg-gray-200 rounded animate-pulse"></div>
							<div class="mt-1 w-48 h-4 bg-gray-200 rounded animate-pulse"></div>
						</div>
					</div>
					<div class="flex space-x-2">
						<div class="w-16 h-8 bg-gray-200 rounded animate-pulse"></div>
						<div class="w-16 h-8 bg-gray-200 rounded animate-pulse"></div>
					</div>
				</div>
			</li>
			<li class="px-4 py-3 sm:px-6">
				<div class="flex items-center justify-between">
					<div class="flex items-center">
						<div class="flex-shrink-0">
							<div class="h-4 w-4 rounded-full bg-gray-200 animate-pulse"></div>
						</div>
						<div class="ml-3">
							<div class="w-32 h-5 bg-gray-200 rounded animate-pulse"></div>
							<div class="mt-1 w-48 h-4 bg-gray-200 rounded animate-pulse"></div>
						</div>
					</div>
					<div class="flex space-x-2">
						<div class="w-16 h-8 bg-gray-200 rounded animate-pulse"></div>
						<div class="w-16 h-8 bg-gray-200 rounded animate-pulse"></div>
					</div>
				</div>
			</li>
			<li class="px-4 py-3 sm:px-6">
				<div class="flex items-center justify-between">
					<div class="flex items-center">
						<div class="flex-shrink-0">
							<div class="h-4 w-4 rounded-full bg-gray-200 animate-pulse"></div>
						</div>
						<div class="ml-3">
							<div class="w-32 h-5 bg-gray-200 rounded animate-pulse"></div>
							<div class="mt-1 w-48 h-4 bg-gray-200 rounded animate-pulse"></div>
						</div>
					</div>
					<div class="flex space-x-2">
						<div class="w-16 h-8 bg-gray-200 rounded animate-pulse"></div>
						<div class="w-16 h-8 bg-gray-200 rounded animate-pulse"></div>
					</div>
				</div>
			</li>
		</ul>
	</div>
}

templ GetScheduled(crons []*types.Cron) {
	if len(crons) == 0 {
		<div class="px-6 py-12 text-center">
			<svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
			</svg>
			<h3 class="mt-2 text-sm font-medium text-gray-900">No spiders scheduled in corn yet</h3>
			<p class="mt-1 text-sm text-gray-500">Schedule a new spider to get started.</p>
			<div class="mt-6">
				<a href="/deploy" type="button" class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
					<svg class="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
					</svg>
					Schedule New Spider
				</a>
			</div>
		</div>
	} else {
		for _, cron := range crons {
			<li class="p-3 sm:p-4">
				<div class="flex flex-col sm:flex-row items-start sm:items-center justify-between border border-gray-200 rounded-lg hover:bg-gray-50">
					<div class="flex items-start space-x-3 p-3 sm:p-4 w-full sm:w-auto">
						<div class="h-2 w-2 bg-green-400 rounded-full flex-shrink-0 mt-1.5" aria-hidden="true"></div>
						<div class="min-w-0 flex-1">
							<div class="font-medium flex flex-col sm:flex-row sm:items-center gap-2 min-w-0 truncate">
								<a href={ templ.SafeURL(fmt.Sprintf("%s/schedule/%s", cron.Project, cron.ID)) } class="text-gray-900 font-medium truncate">
									{ cron.ID }
								</a>
							</div>
							<div class="text-sm text-gray-500 mt-1">Next run: { cron.NextRun }</div>
							<div class="text-sm text-gray-500">Last run: { cron.LastRun }</div>
							<div class="text-sm font-medium text-indigo-600 mt-1 countdown">Countdown: { cron.Countdown }</div>
						</div>
					</div>
					<div class="p-3 sm:p-4 w-full sm:w-auto flex justify-end">
						<a href={ templ.SafeURL(fmt.Sprintf("%s/schedule/%s", cron.Project, cron.ID)) } class="px-3 py-1 text-sm text-indigo-600 bg-indigo-50 rounded-md hover:bg-indigo-100 focus:outline-none focus:ring-2 focus:ring-indigo-500">
							Details
						</a>
					</div>
				</div>
			</li>
		}
		<script>
			function parseTime(text) {
				let days = 0, hours = 0, minutes = 0, seconds = 0;
				
				const daysMatch = text.match(/(\d+)\s*days?/);
				const hoursMatch = text.match(/(\d+)\s*hours?/);
				const minutesMatch = text.match(/(\d+)\s*minutes?/);
				const secondsMatch = text.match(/(\d+)\s*seconds?/);
				
				if (daysMatch) days = parseInt(daysMatch[1]);
				if (hoursMatch) hours = parseInt(hoursMatch[1]);
				if (minutesMatch) minutes = parseInt(minutesMatch[1]);
				if (secondsMatch) seconds = parseInt(secondsMatch[1]);

				return days * 86400 + hours * 3600 + minutes * 60 + seconds;
			}

			function updateCountdowns() {
				const countdownElements = document.querySelectorAll('.countdown');

				countdownElements.forEach((element) => {
					const countdownText = element.textContent;

					let timeRemaining = parseTime(countdownText);

					function updateElementCountdown() {
						let days = Math.floor(timeRemaining / 86400);
						let hours = Math.floor((timeRemaining % 86400) / 3600);
						let minutes = Math.floor((timeRemaining % 3600) / 60);
						let seconds = timeRemaining % 60;

						let formattedTime = 'in ';

						if (days > 0) {
							formattedTime += `${days} days `;
						}
						if (hours > 0) {
							formattedTime += `${hours} hours `;
						}
						if (minutes > 0 || hours > 0 || days > 0) {
							formattedTime += `${minutes} minutes `;
						}
						formattedTime += `${seconds} seconds`;

						element.textContent = formattedTime.trim();

						if (timeRemaining > 0) {
							timeRemaining--;
						} else {
							clearInterval(countdownInterval);
							location.reload(true);
						}
					}

					let countdownInterval = setInterval(updateElementCountdown, 1000);

					updateElementCountdown();
				});
			}

			updateCountdowns();

			document.body.addEventListener('htmx:afterSwap', function(event) {
				if (event.target.id === 'spiderList') {
					updateCountdowns();
				}
			});
		</script>
	}
}

templ GetSpider(spiders *types.ScrapydResponseGetingSpiders) {
	if len(spiders.Running) == 0 {
		<div class="px-6 py-12 text-center">
			<svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
			</svg>
			<h3 class="mt-2 text-sm font-medium text-gray-900">No spiders running</h3>
			<p class="mt-1 text-sm text-gray-500">Get started by deploying a new spider.</p>
			<div class="mt-6">
				<a href="/deploy" type="button" class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
					<svg class="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
					</svg>
					Deploy New Spider
				</a>
			</div>
		</div>
	}
	for _, runningSpider := range(spiders.Running) {
		<li class="px-4 py-3 sm:px-6">
			<div class="flex items-center justify-between">
				<div class="flex items-center">
					<div class="flex-shrink-0">
						<span class="h-4 w-4 rounded-full bg-green-400 flex items-center justify-center">
							<span class="h-2 w-2 rounded-full bg-green-600"></span>
						</span>
					</div>
					<div class="ml-3">
						<p class="text-sm font-medium text-gray-900">{ runningSpider.Id }</p>
						<p class="text-sm text-gray-500">Active - Started at { runningSpider.StartTime }</p>
					</div>
				</div>
				<div class="flex">
					<a href={ templ.SafeURL(fmt.Sprintf("%s/active/%v", runningSpider.Project, runningSpider.Id)) } class="text-sm bg-blue-100 hover:bg-blue-200 text-blue-800 font-semibold py-1 px-3 rounded-full transition duration-300 ease-in-out">
						Details
					</a>
				</div>
			</div>
		</li>
	}
	for _, pendingSpider := range(spiders.Pending) {
		<li class="px-4 py-3 sm:px-6">
			<div class="flex items-center justify-between">
				<div class="flex items-center">
					<div class="flex-shrink-0">
						<span class="h-4 w-4 rounded-full bg-yellow-400 flex items-center justify-center">
							<span class="h-2 w-2 rounded-full bg-yellow-600"></span>
						</span>
					</div>
					<div class="ml-3">
						<p class="text-sm font-medium text-gray-900">{ pendingSpider.Id }</p>
						<p class="text-sm text-gray-500">Pending deployment</p>
					</div>
				</div>
				<div class="flex">
					<a href={ templ.SafeURL(fmt.Sprintf("%s/active/%v", pendingSpider.Project, pendingSpider.Id)) } class="text-sm bg-blue-100 hover:bg-blue-200 text-blue-800 font-semibold py-1 px-3 rounded-full transition duration-300 ease-in-out">
						Details
					</a>
				</div>
			</div>
		</li>
	}
	for _, finishedSpider := range(spiders.Finished) {
		<li class="px-4 py-3 sm:px-6">
			<div class="flex items-center justify-between">
				<div class="flex items-center">
					<div class="flex-shrink-0">
						<span class="h-4 w-4 rounded-full bg-gray-400 flex items-center justify-center">
							<span class="h-2 w-2 rounded-full bg-gray-600"></span>
						</span>
					</div>
					<div class="ml-3">
						<p class="text-sm font-medium text-gray-900">{ finishedSpider.Id }</p>
						<p class="text-sm text-gray-500">Finished - Completed at { finishedSpider.EndTime }</p>
					</div>
				</div>
				<div class="flex">
					<a href={ templ.SafeURL(fmt.Sprintf("%s/active/%v", finishedSpider.Project, finishedSpider.Id)) } class="text-sm bg-blue-100 hover:bg-blue-200 text-blue-800 font-semibold py-1 px-3 rounded-full transition duration-300 ease-in-out">
						Details
					</a>
				</div>
			</div>
		</li>
	}
}
