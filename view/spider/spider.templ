package spiderView

import (
	"fmt"
	"general_spider_controll_panel/types"
	"general_spider_controll_panel/view/layout"
)

templ Main(title string) {
	@layout.Base(title) {
		<div class="flex h-screen">
			@layout.LeftNavbar("Spiders")
			<div class="flex-1 overflow-auto">
				<div class="p-8">
					<div class="flex justify-between items-center mb-6">
						<h1 class="text-3xl font-bold">Spiders</h1>
						<button id="refreshButton" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded flex items-center">
							<i class="ri-refresh-line mr-2"></i> Refresh
						</button>
					</div>
					<div class="bg-white shadow-md rounded-lg overflow-hidden">
						<div class="px-4 py-3 border-b border-gray-200">
							<h2 class="text-lg font-semibold text-gray-800">Active Spiders</h2>
						</div>
						<ul class="divide-y divide-gray-200" id="spiderList" hx-get="?action=get-spiders" hx-trigger="load" hx-swap="innerHTML">
							<li class="px-4 py-3 sm:px-6">
								<div class="flex items-center justify-between">
									<div class="flex items-center">
										<div class="flex-shrink-0">
											<div class="h-4 w-4 rounded-full bg-gray-200 animate-pulse"></div>
										</div>
										<div class="ml-3">
											<div class="w-32 h-5 bg-gray-200 rounded animate-pulse"></div>
											<div class="mt-1 w-48 h-4 bg-gray-200 rounded animate-pulse"></div>
										</div>
									</div>
									<div class="flex space-x-2">
										<div class="w-16 h-8 bg-gray-200 rounded animate-pulse"></div>
										<div class="w-16 h-8 bg-gray-200 rounded animate-pulse"></div>
									</div>
								</div>
							</li>
							<li class="px-4 py-3 sm:px-6">
								<div class="flex items-center justify-between">
									<div class="flex items-center">
										<div class="flex-shrink-0">
											<div class="h-4 w-4 rounded-full bg-gray-200 animate-pulse"></div>
										</div>
										<div class="ml-3">
											<div class="w-32 h-5 bg-gray-200 rounded animate-pulse"></div>
											<div class="mt-1 w-48 h-4 bg-gray-200 rounded animate-pulse"></div>
										</div>
									</div>
									<div class="flex space-x-2">
										<div class="w-16 h-8 bg-gray-200 rounded animate-pulse"></div>
										<div class="w-16 h-8 bg-gray-200 rounded animate-pulse"></div>
									</div>
								</div>
							</li>
							<li class="px-4 py-3 sm:px-6">
								<div class="flex items-center justify-between">
									<div class="flex items-center">
										<div class="flex-shrink-0">
											<div class="h-4 w-4 rounded-full bg-gray-200 animate-pulse"></div>
										</div>
										<div class="ml-3">
											<div class="w-32 h-5 bg-gray-200 rounded animate-pulse"></div>
											<div class="mt-1 w-48 h-4 bg-gray-200 rounded animate-pulse"></div>
										</div>
									</div>
									<div class="flex space-x-2">
										<div class="w-16 h-8 bg-gray-200 rounded animate-pulse"></div>
										<div class="w-16 h-8 bg-gray-200 rounded animate-pulse"></div>
									</div>
								</div>
							</li>
						</ul>
					</div>
				</div>
			</div>
		</div>
	}
}

templ GetSpider(spiders *types.ScrapydResponseGetingSpiders) {
	for _, runningSpider := range(spiders.Running) {
		<li class="px-4 py-3 sm:px-6">
			<div class="flex items-center justify-between">
				<div class="flex items-center">
					<div class="flex-shrink-0">
						<span class="h-4 w-4 rounded-full bg-green-400 flex items-center justify-center">
							<span class="h-2 w-2 rounded-full bg-green-600"></span>
						</span>
					</div>
					<div class="ml-3">
						<p class="text-sm font-medium text-gray-900">{ runningSpider.Id }</p>
						<p class="text-sm text-gray-500">{ runningSpider.StartTime }</p>
					</div>
				</div>
				<div class="flex space-x-2">
					<button class="text-sm bg-red-100 hover:bg-red-200 text-red-800 font-semibold py-1 px-3 rounded-full transition duration-300 ease-in-out">
						Stop
					</button>
					<a href={ templ.SafeURL(fmt.Sprintf("spider/%v", runningSpider.Id)) } class="text-sm bg-blue-100 hover:bg-blue-200 text-blue-800 font-semibold py-1 px-3 rounded-full transition duration-300 ease-in-out">
						Details
					</a>
				</div>
			</div>
		</li>
	}
	for _, finishedSpider := range(spiders.Finished) {
		<li class="px-4 py-3 sm:px-6">
			<div class="flex items-center justify-between">
				<div class="flex items-center">
					<div class="flex-shrink-0">
						<span class="h-4 w-4 rounded-full bg-gray-400 flex items-center justify-center">
							<span class="h-2 w-2 rounded-full bg-gray-600"></span>
						</span>
					</div>
					<div class="ml-3">
						<p class="text-sm font-medium text-gray-900">{ finishedSpider.Id }</p>
						<p class="text-sm text-gray-500">Finished - Completed { finishedSpider.EndTime }</p>
					</div>
				</div>
				<div class="flex space-x-2">
					<button class="text-sm bg-green-100 hover:bg-green-200 text-green-800 font-semibold py-1 px-3 rounded-full transition duration-300 ease-in-out">
						Restart
					</button>
					<a href={ templ.SafeURL(fmt.Sprintf("spider/%v", finishedSpider.Id)) } class="text-sm bg-blue-100 hover:bg-blue-200 text-blue-800 font-semibold py-1 px-3 rounded-full transition duration-300 ease-in-out">
						Details
					</a>
				</div>
			</div>
		</li>
	}
	if len(spiders.Running) == 0 {
		<div id="noSpidersMessage" class="mt-8 text-center">
			<p class="text-gray-600 mb-4">No spiders are currently active or scheduled.</p>
			<a href="deploy-spider.html" class="inline-block bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded">
				Deploy New Spider
			</a>
		</div>
	}
}
