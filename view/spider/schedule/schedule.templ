package scheduleView

import (
	"general_spider_controll_panel/types"
	"general_spider_controll_panel/types/models"
	"general_spider_controll_panel/view/layout"
)

templ Main(title string, cron *types.Cron, timelines []*models.Timeline) {
	@layout.Base(title) {
		<div class="flex h-screen">
			@layout.LeftNavbar("Spiders")
			<div class="flex-1 overflow-auto">
				<div class="p-4 md:p-6">
					<div class="mb-6 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
						<div>
							<h1 class="text-xl font-semibold tracking-tight">
								Spider Configuration Details
							</h1>
							<p class="mt-1 text-sm text-gray-500">
								ID: { cron.ID }
							</p>
						</div>
						<span class="w-fit px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-700">
							Online
						</span>
					</div>
					<div class="grid gap-6">
						<div class="grid gap-6">
							<div class="grid grid-cols-1 gap-6 sm:grid-cols-3">
								<div>
									<div class="flex items-center gap-2">
										<svg class="h-4 w-4 text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
										</svg>
										<span class="text-sm text-gray-500">Created At</span>
										<button class="text-gray-500 hover:text-gray-700" title="Time when this configuration was created">
											<svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
											</svg>
										</button>
									</div>
									<div class="mt-1.5">
										{ cron.CreatedAt }
									</div>
								</div>
								<div>
									<div class="flex items-center gap-2">
										<svg class="h-4 w-4 text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
										</svg>
										<span class="text-sm text-gray-500">Last Updated</span>
									</div>
									<div class="mt-1.5">
										{ cron.UpdatedAt }
									</div>
								</div>
								<div>
									<div class="flex items-center gap-2">
										<span class="text-sm text-gray-500">Next Run</span>
									</div>
									<div class="mt-1.5">
										{ cron.NextRun }
									</div>
								</div>
								<div>
									<div class="flex items-center gap-2">
										<span class="text-sm text-gray-500">Last Run</span>
									</div>
									<div class="mt-1.5">
										{ cron.LastRun }
									</div>
								</div>
								<div>
									<div class="flex items-center gap-2">
										<span class="text-sm text-gray-500">Countdown</span>
									</div>
									<div class="mt-1.5 countdown">
										{ cron.Countdown }
									</div>
								</div>
							</div>
							<div class="rounded-lg border p-4 md:p-6">
								<div class="flex items-center gap-2 mb-4">
									<svg class="h-5 w-5 text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
									</svg>
									<h2 class="text-lg font-medium">Proxy Configuration</h2>
								</div>
								<div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6">
									for _, proxy := range cron.Proxies {
										<div>
											<div class="text-sm text-gray-500">Address</div>
											<div class="mt-1">{ proxy.Address }</div>
										</div>
										<div>
											<div class="text-sm text-gray-500">Port</div>
											<div class="mt-1">{ proxy.Port }</div>
										</div>
										<div>
											<div class="text-sm text-gray-500">Protocol</div>
											<div class="mt-1">{ proxy.Protocol }</div>
										</div>
										<div>
											<div class="text-sm text-gray-500">Usage</div>
											<div class="mt-1 text-gray-500">
												{ proxy.Usage }
											</div>
										</div>
									}
								</div>
							</div>
							<hr class="border-gray-200"/>
							<div class="rounded-lg border p-4 md:p-6">
								<div class="flex flex-col sm:flex-row sm:items-center justify-between gap-4 mb-4">
									<div class="flex items-center gap-2">
										<svg class="h-5 w-5 text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
										</svg>
										<h2 class="text-lg font-medium">Scheduler Information</h2>
									</div>
									<div class="flex items-center gap-2" hx-get="?action=get-schedule-action" hx-trigger="load">
										// <button class="inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-400 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-gray-200 bg-white hover:bg-gray-100 h-8 px-3 py-2">
										// 	<svg class="mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
										// 		<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
										// 	</svg>
										// 	Update Cron
										// </button>
										<button class="inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-red-400 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-red-500 text-white hover:bg-red-600 h-8 px-3 py-2">
											<svg class="mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
											</svg>
											Delete Cron
										</button>
									</div>
								</div>
								<div class="grid grid-cols-1 gap-6 lg:grid-cols-2">
									<div>
										<div class="text-sm text-gray-500">Spider</div>
										<div class="mt-1 break-all">
											{ cron.Spider }
										</div>
									</div>
									<div>
										<div class="text-sm text-gray-500">Job ID</div>
										<div class="mt-1">
											{ cron.JobId }
										</div>
									</div>
									<div>
										<div class="flex items-center gap-2">
											<span class="text-sm text-gray-500">Schedule</span>
											<button class="text-gray-500 hover:text-gray-700" title="Cron schedule expression">
												<svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
													<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
												</svg>
											</button>
										</div>
										<div class="mt-1 text-blue-600">
											{ cron.Schedule }
										</div>
									</div>
									<div>
										<div>
											<div class="text-sm text-gray-500">Project</div>
											<div class="mt-1 truncate">
												{ cron.Project }
											</div>
										</div>
									</div>
									<div>
										<div class="text-sm text-gray-500">Output Destination</div>
										<div class="mt-1">
											{ cron.OutputDst }
										</div>
									</div>
								</div>
								<div class="mt-6">
									<h3 class="text-lg font-medium mb-2">Additional Arguments</h3>
									<div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
										for key, value := range cron.AdditionalArgs {
											<div>
												<div class="text-sm text-gray-500">{ key }</div>
												<div class="mt-1 break-all">
													{ value }
												</div>
											</div>
										}
									</div>
								</div>
							</div>
							<div class="rounded-lg border p-4 md:p-6">
								<h3 class="text-lg font-medium mb-4">Cron Run Timeline</h3>
								<div class="space-y-4">
									if len(timelines) == 0 {
										<div id="noDomains" class="px-6 py-12 text-center">
											<svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
											</svg>
											<h3 class="mt-2 text-sm font-medium text-gray-900">Please wait until the cron job is executed</h3>
											<p class="mt-1 text-sm text-gray-500">The cron job is still processing. Please check back later.</p>
										</div>
									}
									for _, timeline := range timelines {
										<div class="flex items-start">
											switch timeline.Status {
												case models.Success:
													<div class="flex-shrink-0 w-10 h-10 rounded-full bg-blue-500 flex items-center justify-center">
														<svg class="h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
															<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
														</svg>
													</div>
												case models.Failed:
													<div class="flex-shrink-0 w-10 h-10 rounded-full bg-red-500 flex items-center justify-center">
														<svg class="h-5 w-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
															<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
														</svg>
													</div>
												default:
													<div class="flex-shrink-0 w-10 h-10 rounded-full bg-yellow-500 flex items-center justify-center">
														<svg class="h-5 w-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
															<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
														</svg>
													</div>
											}
											<div class="ml-4 flex-grow">
												<div class="flex justify-between items-center">
													<h4 class="text-sm font-medium">{ timeline.Title }</h4>
													<span class="text-xs text-gray-500">{ timeline.CreatedAt.String() }</span>
												</div>
												<p class="text-sm text-gray-600 mt-1">{ timeline.Message }</p>
											</div>
										</div>
									}
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
			<script>
			function parseTime(text) {
				let days = 0, hours = 0, minutes = 0, seconds = 0;
				
				const daysMatch = text.match(/(\d+)\s*days?/);
				const hoursMatch = text.match(/(\d+)\s*hours?/);
				const minutesMatch = text.match(/(\d+)\s*minutes?/);
				const secondsMatch = text.match(/(\d+)\s*seconds?/);
				
				if (daysMatch) days = parseInt(daysMatch[1]);
				if (hoursMatch) hours = parseInt(hoursMatch[1]);
				if (minutesMatch) minutes = parseInt(minutesMatch[1]);
				if (secondsMatch) seconds = parseInt(secondsMatch[1]);

				return days * 86400 + hours * 3600 + minutes * 60 + seconds;
			}

			function updateCountdowns() {
				const countdownElements = document.querySelectorAll('.countdown');

				countdownElements.forEach((element) => {
					const countdownText = element.textContent;

					let timeRemaining = parseTime(countdownText);

					function updateElementCountdown() {
						let days = Math.floor(timeRemaining / 86400);
						let hours = Math.floor((timeRemaining % 86400) / 3600);
						let minutes = Math.floor((timeRemaining % 3600) / 60);
						let seconds = timeRemaining % 60;

						let formattedTime = 'in ';

						if (days > 0) {
							formattedTime += `${days} days `;
						}
						if (hours > 0) {
							formattedTime += `${hours} hours `;
						}
						if (minutes > 0 || hours > 0 || days > 0) {
							formattedTime += `${minutes} minutes `;
						}
						formattedTime += `${seconds} seconds`;

						element.textContent = formattedTime.trim();

						if (timeRemaining > 0) {
							timeRemaining--;
						} else {
							clearInterval(countdownInterval);
							location.reload(true);
						}
					}

					let countdownInterval = setInterval(updateElementCountdown, 1000);

					updateElementCountdown();
				});
			}

			updateCountdowns();

			document.body.addEventListener('DOMContentLoaded', function(event) {
				updateCountdowns();
			});
		</script>
		</div>
	}
}

templ ScheduleActionUI(id string) {
	<div id="deleteModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden opacity-0 transition-opacity duration-300 z-50">
		<div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white transform transition-all duration-300 -translate-y-full scale-95 opacity-0 z-50">
			<div class="mt-3 text-center">
				<h3 class="text-lg leading-6 font-medium text-gray-900">Confirm Deletion</h3>
				<div class="mt-2 px-7 py-3">
					<p class="text-sm text-gray-500">
						Are you sure you want to stop the spider "<span class="font-medium break-all">{ id }</span>"? This action cannot be undone.
					</p>
				</div>
				<div class="items-center px-4 py-3">
					<button onClick={ hideDeletionModal() } id="confirmDelete" hx-delete="" class="px-4 py-2 bg-red-500 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-300 transition duration-300">
						Yes, stop the spider
					</button>
					<button onClick={ hideDeletionModal() } id="cancelDelete" class="mt-3 px-4 py-2 bg-white text-gray-700 text-base font-medium rounded-md w-full shadow-sm border border-gray-300 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-300 transition duration-300">
						Cancel
					</button>
				</div>
			</div>
		</div>
	</div>
	<button onclick={ showDeletionModal() } id="stopButton" class="inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-red-400 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-red-500 text-white hover:bg-red-600 h-8 px-3 py-2">
		<svg class="mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
			<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
		</svg>
		Delete Cron
	</button>
}

script showDeletionModal() {
    const modal = document.getElementById('deleteModal');
    const modalContent = modal.querySelector('div');
    const confirmDelete = document.getElementById('confirmDelete');

    htmx.process(confirmDelete);
    modal.classList.remove('hidden');
    setTimeout(() => {
        modal.classList.remove('opacity-0');
        modalContent.classList.remove('-translate-y-full', 'scale-95', 'opacity-0');
    }, 50);
}

script hideDeletionModal() {
    const modal = document.getElementById('deleteModal');
    const modalContent = modal.querySelector('div');

    modal.classList.add('opacity-0');
    modalContent.classList.add('-translate-y-full', 'scale-95', 'opacity-0');
    setTimeout(() => {
        modal.classList.add('hidden');
    }, 300);
}
