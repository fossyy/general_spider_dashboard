package deployView

import "general_spider_controll_panel/view/layout"

templ Main(title string) {
	@layout.Base(title) {
		<div class="flex h-screen">
			@layout.LeftNavbar("Deploy")
			<div class="container mx-auto p-4 max-w-2xl">
				<div class="mb-6">
					<a href="/spiders" class="text-blue-600 hover:underline flex items-center">
						<i class="ri-arrow-left-line mr-2"></i>
						Back to Spider List
					</a>
				</div>
				<h1 class="text-3xl font-bold mb-6">Deploy Spider</h1>
				<form id="deployForm" class="space-y-6">
					<div>
						<label for="base-url-select" class="block text-sm font-medium text-gray-700 mb-1">Select Base URL</label>
						<select id="base-url-select" name="base_url" class="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" required>
							<option value="">Select a base URL</option>
						</select>
					</div>
					<div>
						<label for="config-select" class="block text-sm font-medium text-gray-700 mb-1">Select Configuration</label>
						<select id="config-select" name="config" class="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" required>
							<option value="">Select a configuration</option>
						</select>
					</div>
					<div id="spider-settings" class="space-y-4">
						<div>
							<label for="download_delay" class="block text-sm font-medium text-gray-700 mb-1">Download Delay (seconds)</label>
							<input type="number" id="download_delay" name="download_delay" class="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" placeholder="1" min="0" step="0.1"/>
						</div>
						<div>
							<label for="concurrent_requests" class="block text-sm font-medium text-gray-700 mb-1">Concurrent Requests</label>
							<input type="number" id="concurrent_requests" name="concurrent_requests" class="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" placeholder="16" min="1"/>
						</div>
						<div>
							<label for="additional_settings" class="block text-sm font-medium text-gray-700 mb-1">Additional Settings (JSON)</label>
							<textarea id="additional_settings" name="additional_settings" rows="4" class="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" placeholder='{"ROBOTSTXT_OBEY": true, "USER_AGENT": "MyBot/1.0"}'></textarea>
						</div>
					</div>
					<button type="submit" class="w-full inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
						Deploy Spider
					</button>
				</form>
				<div class="mt-6 p-4 bg-yellow-100 rounded-md flex items-start">
					<i class="ri-alert-line text-yellow-700 mr-2 mt-0.5"></i>
					<p class="text-sm text-yellow-700">
						Deploying a spider will consume resources and may incur costs. Make sure you have the necessary permissions and understand the implications before proceeding.
					</p>
				</div>
			</div>
		</div>
		<script>
        let spiderConfigs = [];

        fetch('/api/spider-configs')
            .then(response => response.json())
            .then(data => {
                spiderConfigs = data;
                populateBaseUrls();
            })
            .catch(error => console.error('Error fetching spider configs:', error));

        function populateBaseUrls() {
            const baseUrlSelect = document.getElementById('base-url-select');
            baseUrlSelect.innerHTML = '<option value="">Select a base URL</option>';
            spiderConfigs.forEach(config => {
                const option = document.createElement('option');
                option.value = config.base_url;
                option.textContent = config.base_url;
                baseUrlSelect.appendChild(option);
            });
        }

        function populateConfigs(baseUrl) {
            const configSelect = document.getElementById('config-select');
            configSelect.innerHTML = '<option value="">Select a configuration</option>';
            const selectedConfig = spiderConfigs.find(config => config.base_url === baseUrl);
            if (selectedConfig) {
                selectedConfig.configs.forEach(configId => {
                    const option = document.createElement('option');
                    option.value = configId;
                    option.textContent = `Config ${configId.slice(0, 8)}...`;
                    configSelect.appendChild(option);
                });
            }
        }

        document.getElementById('base-url-select').addEventListener('change', (e) => {
            populateConfigs(e.target.value);
        });

        document.getElementById('deployForm').addEventListener('submit', (e) => {
            e.preventDefault();
            const formData = new FormData(e.target);
            const data = Object.fromEntries(formData.entries());
            
            try {
                data.additional_settings = JSON.parse(data.additional_settings);
            } catch (error) {
                console.error('Invalid JSON in additional settings');
                alert('Invalid JSON in additional settings. Please check and try again.');
                return;
            }

            console.log('Deploying spider with settings:', data);
            fetch('/api/deploy-spider', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data),
            })
            .then(response => response.json())
            .then(result => {
                console.log('Deployment result:', result);
                alert('Spider deployment initiated successfully!');
            })
            .catch(error => {
                console.error('Error deploying spider:', error);
                alert('Error deploying spider. Please try again.');
            });
        });
    </script>
	}
}
